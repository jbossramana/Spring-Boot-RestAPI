
Step 1: Create the Category by sending a POST request to its endpoint.

URL: http://localhost:8080/category

Method: POST

Body:

{
  "name": "New Category"
}

Step 2: Create the Task and link it to the Category using the URI from the previous step.

URL: http://localhost:8080/task

Method: POST

Body:


{
  "description": "New Task Description",
  "category": "http://localhost:8080/category/1"
}


Notes:
JPA Layer: This layer understands @ManyToOne and CascadeType.ALL. If you were to manually create and save both a Task and a 
new Category instance in a service layer, the cascade would work perfectly.

Spring Data REST Layer: This layer is designed to be a thin wrapper around your repositories, exposing them as REST 
endpoints. It interprets the incoming JSON request as a set of properties to apply to the main resource (Task). 
When it sees "category": { ... }, it doesn't see a new entity to create. Instead, it expects a link to an existing 
resource, like "category": "/category/1".


@RepositoryRestResource(path = "employees", collectionResourceRel = "employees")
public interface EmployeeRepository extends JpaRepository<Employee, Long> {

    @Procedure("get_employees_by_department")
    List<Employee> getEmployeesByDepartment(@Param("dept_name") String department);

    @Query("SELECT e FROM Employee e WHERE e.department = :deptName")
    List<Employee> findEmployeesByDepartment(@Param("deptName") String deptName);
}


Spring Data REST will expose them at URLs like:

/employees/search/findEmployeesByDepartment
/employees/search/getEmployeeById
