BeanPostProcessor
=================

BeanPostProcessor are special beans registered to the applicationcontext.
As part of the lifecycle all the beans must go through the registed beanpostprocessors.

There are two types of beanpostprocessors.

1. in-built beanpostprocessors
|_  AutowiredAnnotationBeanPostProcessor
|_  CommonAnnotationBeanPostProcessor
|_  DefaultAdvisorAutoProxyCreator

2. custom beanpostprocessors

To write custom beanpostprocessor, the class must implement BeanPostProcessor interface 
and provide implementation for the below methods:

public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
		 if (!"appConfig".equals(beanName)) 
		System.out.println("Lifecycle 4 ... postProcessBeforeInitialization : " + beanName);
		return bean;
	}
	
public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
		 if (!"appConfig".equals(beanName)) 
		System.out.println("Lifecycle 8  ... postProcessAfterInitialization " + beanName);
		return bean;
	}



@PropertySources({
    @PropertySource("classpath:foo.properties"),
    @PropertySource("classpath:bar.properties")
})


Profile names can be passed as jvm parameter
-Dspring.profiles.active=dev

in application.properties
spring.profiles.active=dev


In test environment
@ActiveProfiles("dev")
